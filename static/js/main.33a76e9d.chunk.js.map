{"version":3,"sources":["const/cell-value.js","const/cell-state.js","utils/check-cell.js","components/Cell/Cell.js","components/Field/Field.js","components/Footer/Footer.js","components/Header/Header.js","view-models/cell-address-utils.js","view-models/cell-neighbors-utils.js","components/Indicators/Indicators.js","hooks/use-interval.js","components/Minesweeper/Minesweeper.js","hooks/use-field.js","hooks/use-did-update.js","App.js","setupIcons.js","index.js"],"names":["cellValue","cellState","Hidden","Visible","Flagged","checkCell","cell","prop","criteria","isMinedCell","isHiddenCell","isFlaggedCell","isBustedCell","Cell","memo","cellRevealHandler","flagPlantingHandler","neighborsRevealHandler","value","hasGuessedIncorrectly","hasBustedMine","className","onClick","onContextMenu","icon","onMouseDown","Field","width","disabled","field","handleNeighborsReveal","address","target","which","nativeEvent","addEventListener","handleMouseup","event","removeEventListener","style","gridTemplateColumns","preventDefault","map","key","Footer","href","rel","Date","getFullYear","Header","CellAddressUtils","fieldWidth","this","_fieldWidth","rowAddress","colAddress","CellNeighborsUtils","fieldHeight","_fieldHeight","_cellAddressUtils","state","getAddresses","some","adr","to2DAddresses","addresses","rowAddressOffset","colAddressOffset","rowAddressAhead","colAddressAhead","_doesAddressExist","push","to1DAddress","_getCountBy","getMinedCount","reduce","ac","Indicators","minesCount","smileyFaceClickHandler","isCountingSeconds","isBust","isVictory","useState","secondsCount","setSecondsCount","formatCount","count","fn","delay","fnRef","useRef","useEffect","current","intervalId","setInterval","clearInterval","useInterval","Minesweeper","fieldDimension","isInit","setIsInit","setIsBust","setIsVictory","hiddenMinesCount","setHiddenMinesCount","height","length","cellNeighborsUtils","useMemo","emptyField","Array","fill","setField","getFloodFilledField","draftFn","produce","draft","floodFill","cellAdr","canFloodFill","forEach","getBustedField","reset","init","difference","range","randomAddresses","Set","size","add","Math","random","revealCell","plantFlag","revealNeighbors","canRevealNeighbors","markMines","useField","didMount","deps","useDidUpdate","reject","App","library","faGithub","faBomb","faFlag","faMeh","faFrown","faSmile","render","document","getElementById"],"mappings":"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","file":"static/js/main.33a76e9d.chunk.js","sourcesContent":["export const cellValue = {\n  BustedMine: -3,\n  IncorrectGuess: -2,\n  Mine: -1,\n  Empty: 0,\n  One: 1,\n  Two: 2,\n  Three: 3,\n  Four: 4,\n  Five: 5,\n  Six: 6,\n  Seven: 7,\n  Eight: 8,\n};\n","export const cellState = {\n  Hidden: 0,\n  Visible: 1,\n  Flagged: 2,\n};\n","import { cellState, cellValue } from 'const';\n\nconst checkCell = (cell, prop, criteria) => cell[prop] === criteria;\n\nexport const isMinedCell = cell => checkCell(cell, 'value', cellValue.Mine);\nexport const isHiddenCell = cell => checkCell(cell, 'state', cellState.Hidden);\nexport const isFlaggedCell = cell => checkCell(cell, 'state', cellState.Flagged);\nexport const isBustedCell = cell => checkCell(cell, 'value', cellValue.BustedMine);\n","import React, { memo } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { isBustedCell, isFlaggedCell, isHiddenCell, isMinedCell } from 'utils/check-cell';\n\nimport { cellValue } from 'const';\n\nimport './Cell.scss';\n\nexport const Cell = memo(({ cell, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\n  const { value } = cell;\n\n  const hasGuessedIncorrectly = value === cellValue.IncorrectGuess;\n  const hasBustedMine = isBustedCell(cell);\n\n  if (isHiddenCell(cell)) return <div\n    className='cell'\n    onClick={cellRevealHandler}\n    onContextMenu={flagPlantingHandler}\n  />;\n\n  if (isFlaggedCell(cell)) return <div className='cell' onContextMenu={flagPlantingHandler}>\n    <FontAwesomeIcon icon={['far', 'flag']} />\n  </div>;\n\n  if (value === cellValue.Empty) return <div className='cell cell__visible' />;\n\n  if (isMinedCell(cell) || hasGuessedIncorrectly || hasBustedMine) return <div\n    className={`cell ${hasGuessedIncorrectly ? 'cell__incorrect-guess' : hasBustedMine ? 'cell__busted-mine' : ''}`}\n  >\n    <FontAwesomeIcon icon={['fas', 'bomb']} />\n  </div>;\n\n  return <div className={`cell cell__visible cell__visible__${value}`} onMouseDown={neighborsRevealHandler}>\n    {value}\n  </div>;\n});\n","import React from 'react';\n\nimport { Cell } from '..';\n\nimport './Field.scss';\n\nexport const Field = ({ width, disabled, field, cellRevealHandler, flagPlantingHandler, neighborsRevealHandler }) => {\n  const handleNeighborsReveal = ({ target, nativeEvent: { which } }, address) => {\n    if (!disabled) {\n      const handleMouseup = event => {\n        which !== event.which && neighborsRevealHandler(address);\n\n        target.removeEventListener('mouseup', handleMouseup);\n      };\n\n      target.addEventListener('mouseup', handleMouseup);\n    }\n  };\n\n  return <div\n    className={`field${disabled ? ' disabled' : ''}`}\n    style={{gridTemplateColumns: `repeat(${width}, 1fr)`}}\n    onContextMenu={event => { event.preventDefault(); }}\n  >\n    {field.map((cell, address) => <Cell\n      key={address}\n      cell={cell}\n      cellRevealHandler={() => { !disabled && cellRevealHandler(cell, address); }}\n      flagPlantingHandler={() => { !disabled && flagPlantingHandler(cell, address); }}\n      neighborsRevealHandler={event => { handleNeighborsReveal(event, address); }}\n    />)}\n  </div>;\n};\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './Footer.scss';\n\nexport const Footer = () => <footer>\n  <span>\n    Powered by\n    <a href='https://github.com/FakeMetalFan' target='_blank' rel='noopener noreferrer'>\n      <FontAwesomeIcon icon={['fab', 'github']} />\n    </a>\n    &copy;<span>{new Date().getFullYear()}</span>\n  </span>\n</footer>;\n","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './Header.scss';\n\nexport const Header = () => <header>\n  <span className='title'>Minesweeper</span>\n\n  <a href='https://github.com/FakeMetalFan/minesweeper' target='_blank' rel='noopener noreferrer'>\n    <FontAwesomeIcon icon={['fab', 'github']} />\n  </a>\n</header>;\n","export class CellAddressUtils {\n  _fieldWidth;\n\n  constructor(\n    fieldWidth\n  ) {\n    this._fieldWidth = fieldWidth;\n  }\n\n  to2DAddresses(address) {\n    const rowAddress = address % this._fieldWidth;\n\n    return [rowAddress, (address - rowAddress) / this._fieldWidth];\n  }\n\n  to1DAddress(rowAddress, colAddress) {\n    return colAddress * this._fieldWidth + rowAddress;\n  }\n}\n","import { isFlaggedCell, isMinedCell } from 'utils/check-cell';\n\nimport { CellAddressUtils } from './cell-address-utils';\n\nexport class CellNeighborsUtils {\n  _fieldWidth;\n  _fieldHeight;\n  _cellAddressUtils;\n\n  constructor(\n    fieldWidth,\n    fieldHeight\n  ) {\n    this._fieldWidth = fieldWidth;\n    this._fieldHeight = fieldHeight;\n    this._cellAddressUtils = new CellAddressUtils(fieldWidth);\n  }\n\n  canFloodFill(state, address) {\n    return !this.getAddresses(address).some(adr => {\n      const cell = state[adr];\n\n      return isMinedCell(cell) && !isFlaggedCell(cell);\n    });\n  }\n\n  getAddresses(address) {\n    const [rowAddress, colAddress] = this._cellAddressUtils.to2DAddresses(address);\n    const addresses = [];\n\n    for (let rowAddressOffset = -1; rowAddressOffset < 2; rowAddressOffset++)\n      for (let colAddressOffset = -1; colAddressOffset < 2; colAddressOffset++)\n        if (rowAddressOffset || colAddressOffset) {\n          const rowAddressAhead = rowAddress + rowAddressOffset;\n          const colAddressAhead = colAddress + colAddressOffset;\n\n          this._doesAddressExist(rowAddressAhead, this._fieldWidth)\n            && this._doesAddressExist(colAddressAhead, this._fieldHeight)\n              && addresses.push(this._cellAddressUtils.to1DAddress(rowAddressAhead, colAddressAhead));\n        }\n\n    return addresses;\n  }\n\n  getMinedCount(state, address) {\n    return this._getCountBy(state, address, isMinedCell);\n  }\n\n  canRevealNeighbors(state, address) {\n    return this.getMinedCount(state, address) === this._getCountBy(state, address, isFlaggedCell);\n  }\n\n  _getCountBy(state, address, criteria) {\n    return this.getAddresses(address).reduce((ac, adr) => criteria(state[adr]) ? ac + 1 : ac, 0);\n  }\n\n  _doesAddressExist(address, criteria) {\n    return -1 < address && address < criteria;\n  }\n}\n","import React, { useState } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { useInterval } from 'hooks';\n\nimport './Indicators.scss';\n\nexport const Indicators = ({ minesCount, smileyFaceClickHandler, isCountingSeconds, isBust, isVictory }) => {\n  const [secondsCount, setSecondsCount] = useState(0);\n\n  const formatCount = count => {\n    if (count < 1) return '000';\n    if (count < 10) return `00${count}`;\n    if (count < 100) return `0${count}`;\n\n    return `${count}`;\n  };\n\n  const handleSmileyFaceClick = () => {\n    setSecondsCount(0);\n    smileyFaceClickHandler();\n  };\n\n  useInterval(() => {\n    setSecondsCount(secondsCount + 1);\n  }, isCountingSeconds ? 1e3 : null);\n\n  return <div className='indicators'>\n    <div className='mines-count'>{formatCount(minesCount)}</div>\n    <div className='smiley-face' onClick={handleSmileyFaceClick}>\n      <FontAwesomeIcon icon={['far', isVictory ? 'smile' : isBust ? 'frown' : 'meh']} />\n    </div>\n    <div className='timer'>{formatCount(secondsCount)}</div>\n  </div>;\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useInterval = (fn, delay) => {\n  const fnRef = useRef();\n\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn])\n\n  useEffect(() => {\n    if (delay) {\n      const intervalId = setInterval(() => {\n        fnRef.current();\n      }, delay);\n\n      return () => {\n        clearInterval(intervalId);\n      };\n    }\n  }, [delay]);\n};\n","import React, { useState } from 'react';\n\nimport reject from 'lodash/reject';\n\nimport { useField, useDidUpdate } from 'hooks';\n\nimport { isBustedCell, isFlaggedCell, isHiddenCell, isMinedCell } from 'utils/check-cell';\n\nimport { Field, Indicators } from '..';\n\nimport './Minesweeper.scss';\n\nexport const Minesweeper = ({ minesCount, fieldDimension }) => {\n  const [isInit, setIsInit] = useState(false);\n  const [isBust, setIsBust] = useState(false);\n  const [isVictory, setIsVictory] = useState(false);\n  const [hiddenMinesCount, setHiddenMinesCount] = useState(minesCount);\n\n  const {\n    field,\n    reset,\n    init,\n    revealCell,\n    plantFlag,\n    revealNeighbors,\n    markMines,\n  } = useField({ minesCount, width: fieldDimension, height: fieldDimension });\n\n  const handleCellReveal = (cell, address) => {\n    if (isInit) revealCell(cell, address);\n    else {\n      init(address);\n      setIsInit(true);\n    }\n  };\n\n  const handleFlagPlanting = (cell, address) => {\n    plantFlag(cell, address);\n    setHiddenMinesCount(hiddenMinesCount + isFlaggedCell(cell) ? 1 : -1);\n  };\n\n  const handleSmileyFaceClick = () => {\n    reset();\n    setIsInit(false);\n    setIsBust(false);\n    setIsVictory(false);\n    setHiddenMinesCount(minesCount);\n  };\n\n  useDidUpdate(() => {\n    if (field.some(isBustedCell)) setIsBust(true);\n    else if (!reject(field, isMinedCell).some(isHiddenCell)) {\n      markMines();\n      setIsVictory(true);\n    }\n  }, field);\n\n  return <div className='minesweeper'>\n    <Indicators\n      minesCount={hiddenMinesCount}\n      isBust={isBust}\n      isVictory={isVictory}\n      isCountingSeconds={isInit && !(isBust || isVictory)}\n      smileyFaceClickHandler={handleSmileyFaceClick}\n    />\n    <Field\n      width={fieldDimension}\n      disabled={isBust || isVictory}\n      field={field}\n      cellRevealHandler={handleCellReveal}\n      flagPlantingHandler={handleFlagPlanting}\n      neighborsRevealHandler={revealNeighbors}\n    />\n  </div>;\n};\n","import { useState, useMemo } from 'react';\n\nimport produce from 'immer';\n\nimport difference from 'lodash/difference';\nimport range from 'lodash/range';\n\nimport { cellState, cellValue } from 'const';\n\nimport { CellNeighborsUtils } from 'view-models';\n\nimport { isMinedCell, isHiddenCell, isFlaggedCell } from 'utils/check-cell';\n\nexport const useField = ({ width, height, minesCount }) => {\n  const length = width * height;\n\n  const cellNeighborsUtils = useMemo(() => new CellNeighborsUtils(width, height), [length]);\n  const emptyField = useMemo(() => Array(length).fill({ value: cellValue.Empty, state: cellState.Hidden }), [length]);\n\n  const [field, setField] = useState(emptyField);\n\n  const getFloodFilledField = (address, draftFn) => produce(field, draft => {\n    /* eslint-disable-line */ draftFn?.(draft);\n    draft[address].state = cellState.Visible;\n\n    const floodFill = cellAdr => {\n      cellNeighborsUtils.canFloodFill(draft, cellAdr) && cellNeighborsUtils.getAddresses(cellAdr).forEach(adr => {\n        const cell = draft[adr];\n\n        if (!isMinedCell(cell) && isHiddenCell(cell) && !isFlaggedCell(cell)) {\n          cell.state = cellState.Visible;\n\n          floodFill(adr);\n        }\n      });\n    };\n\n    floodFill(address);\n  });\n\n  const getBustedField = draftFn => produce(field, draft => {\n    draftFn(draft);\n    draft.forEach((cell, adr) => {\n      isMinedCell(cell) && !isFlaggedCell(cell) && (cell.state = cellState.Visible);\n      !isMinedCell(cell) && isFlaggedCell(cell) && (draft[adr] = {\n        value: cellValue.IncorrectGuess,\n        state: cellState.Visible,\n      });\n    });\n  });\n\n  const reset = () => {\n    setField(emptyField);\n  };\n\n  const init = address => {\n    setField(getFloodFilledField(address, draft => {\n      const addresses = difference(range(length), [address, ...cellNeighborsUtils.getAddresses(address)]);\n      const randomAddresses = new Set;\n\n      while (randomAddresses.size < minesCount) randomAddresses.add(addresses[Math.random() * addresses.length | 0]);\n\n      randomAddresses.forEach(adr => {\n        draft[adr].value = cellValue.Mine;\n      });\n\n      draft.forEach((cell, adr) => {\n        !isMinedCell(cell) && (cell.value = cellNeighborsUtils.getMinedCount(draft, adr));\n      });\n    }));\n  };\n\n  const revealCell = (cell, address) => {\n    setField(isMinedCell(cell) ? getBustedField(draft => {\n      draft[address] = { value: cellValue.BustedMine, state: cellState.Visible };\n    }) : getFloodFilledField(address));\n  };\n\n  const plantFlag = (cell, address) => {\n    setField(produce(field, draft => {\n      draft[address].state = cellState[isFlaggedCell(cell) ? 'Hidden' : 'Flagged'];\n    }));\n  };\n\n  const revealNeighbors = address => {\n    if (cellNeighborsUtils.canFloodFill(field, address)) setField(getFloodFilledField(address));\n    else if (cellNeighborsUtils.canRevealNeighbors(field, address)) setField(getBustedField(draft => {\n      cellNeighborsUtils.getAddresses(address).forEach(adr => {\n        const cell = draft[adr];\n\n        isMinedCell(cell) && !isFlaggedCell(cell) && (cell.value = cellValue.BustedMine);\n        !isMinedCell(cell) && isFlaggedCell(cell) && (cell.value = cellValue.IncorrectGuess);\n\n        cell.state = cellState.Visible;\n      });\n    }));\n  };\n\n  const markMines = () => {\n    setField(produce(field, draft => {\n      draft.forEach(cell => {\n        isMinedCell(cell) && (cell.state = cellState.Flagged);\n      });\n    }));\n  };\n\n  return { field, reset, init, revealCell, plantFlag, revealNeighbors, markMines };\n};\n","import { useEffect, useRef } from 'react';\n\nexport const useDidUpdate = (fn, ...deps) => {\n  const fnRef = useRef();\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    fnRef.current = fn;\n  }, [fn]);\n\n  useEffect(() => {\n    if (didMount.current) fnRef.current();\n    else didMount.current = true;\n  }, deps);\n};\n","import React from 'react';\n\nimport { Header, Minesweeper, Footer } from 'components';\n\nexport const App = () => <>\n  <Header />\n  <Minesweeper minesCount={30} fieldDimension={16} />\n  <Footer />\n</>;\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport { faFlag, faMeh, faFrown, faSmile } from '@fortawesome/free-regular-svg-icons';\nimport { faBomb } from '@fortawesome/free-solid-svg-icons';\n\nexport const setupIcons = () => {\n  library.add(faGithub, faBomb, faFlag, faMeh, faFrown, faSmile);\n};\n","import React, { StrictMode }  from 'react';\nimport { render } from 'react-dom';\n\nimport { App } from 'App';\n\nimport { setupIcons } from 'setupIcons';\n\nimport 'index.scss';\n\nsetupIcons();\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}